{"version":3,"sources":["utils/fetchClient.ts","components/Context/Context.tsx","components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","api/Api.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","a","json","ok","error","Error","client","Context","React","createContext","posts","postId","isShownForm","isLoading","setIsLoading","_value","setPosts","_post","setPostId","_id","setIsShownForm","ContextProvider","children","useState","value","useMemo","Provider","PostsList","setIsShownSideBar","getComments","useContext","className","map","post","title","id","type","cn","onClick","handleClick","Loader","NewCommentForm","setComments","name","setName","email","setEmail","setBody","isName","setIsName","isEmail","setIsEmail","isComment","setIsComment","handleChange","query","setQuery","setIsQuery","isQuery","onSubmit","event","preventDefault","newComment","current","catch","finally","htmlFor","placeholder","onChange","target","PostDetails","comments","errorMessage","find","p","removeComment","deleteComments","filter","comment","includes","length","href","UserSelector","isSelectedUser","getPosts","users","setUsers","selectedUser","setSelectedUser","isShownUsers","setIsShownUsers","useEffect","loadUsers","onBlur","role","user","App","isShownSideBar","setErrorMessage","useRef","loadPosts","loadComments","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.30a44ae1.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(async response => {\n      const json = await response.json();\n\n      if (response.ok) {\n        return json;\n      }\n\n      const error = new Error('');\n\n      throw { ...error, ...json };\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useMemo, useState } from 'react';\nimport { Post } from '../../types/Post';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const Context = React.createContext({\n  posts: [] as Post[],\n  postId: 0,\n  isShownForm: false,\n  isLoading: false,\n  setIsLoading: (_value: boolean) => {},\n  setPosts: (_post: Post[]) => {},\n  setPostId: (_id: number) => {},\n  setIsShownForm: (_value: boolean) => {},\n});\n\nexport const ContextProvider: React.FC<Props> = ({ children }) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [postId, setPostId] = useState(0);\n  const [isShownForm, setIsShownForm] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const value = useMemo(() => ({\n    posts,\n    postId,\n    isShownForm,\n    isLoading,\n    setIsLoading,\n    setPosts,\n    setPostId,\n    setIsShownForm,\n  }), [postId, posts, isShownForm, isLoading]);\n\n  return (\n    <Context.Provider value={value}>\n      {children}\n    </Context.Provider>\n  );\n};\n","import React, { useContext } from 'react';\nimport cn from 'classnames';\nimport { Context } from './Context/Context';\n\ntype Props = {\n  setIsShownSideBar: (value: boolean) => void;\n  getComments: (id: number) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  setIsShownSideBar,\n  getComments,\n}) => {\n  const {\n    postId,\n    posts,\n    setPostId,\n    setIsShownForm,\n  } = useContext(Context);\n\n  const handleClick = (id: number) => {\n    if (postId === id) {\n      setIsShownSideBar(false);\n      setPostId(0);\n    } else {\n      getComments(id);\n      setIsShownSideBar(true);\n      setPostId(id);\n      // setPostId(0);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => {\n            const { title, id } = post;\n\n            return (\n              <tr data-cy=\"Post\" key={id}>\n                <td data-cy=\"PostId\">{id}</td>\n\n                <td data-cy=\"PostTitle\">\n                  {title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={cn('button is-link', {\n                      'is-light': postId !== id,\n                    })}\n                    onClick={() => {\n                      handleClick(id);\n                      setIsShownForm(false);\n                    }}\n                  >\n                    {postId === id ? 'Close' : 'Open'}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useContext, useState } from 'react';\nimport cn from 'classnames';\nimport { addComment } from '../api/Api';\nimport { Comment } from '../types/Comment';\nimport { Context } from './Context/Context';\n\ntype Props = {\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ setComments }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [isName, setIsName] = useState(false);\n  const [isEmail, setIsEmail] = useState(false);\n  const [isComment, setIsComment] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const { postId } = useContext(Context);\n\n  const submitData = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setIsName(!name);\n    setIsEmail(!email);\n    setIsComment(!body);\n\n    if (!name || !body || !email) {\n      return;\n    }\n\n    const newComment = {\n      postId,\n      name,\n      email,\n      body,\n    };\n\n    setIsLoading(true);\n    addComment(newComment)\n      .then((data) => setComments(current => [...current, data]))\n      .catch()\n      .finally(() => {\n        setIsLoading(false);\n        setBody('');\n      });\n  };\n\n  const handleChange = (\n    query: string,\n    setQuery: (value: string) => void,\n    setIsQuery: (value: boolean) => void,\n    isQuery: boolean,\n  ) => {\n    setQuery(query);\n\n    if (isQuery) {\n      setIsQuery(!isQuery);\n    }\n  };\n\n  const reset = () => {\n    setBody('');\n    setName('');\n    setEmail('');\n    setIsName(false);\n    setIsEmail(false);\n    setIsComment(false);\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={submitData}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', { 'is-danger': isName })}\n            value={name}\n            onChange={(event) => {\n              handleChange(event.target.value, setName, setIsName, isName);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isName && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', { 'is-danger': isEmail })}\n            value={email}\n            onChange={(event) => {\n              handleChange(event.target.value, setEmail, setIsEmail, isEmail);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isEmail && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isEmail && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn('input', { 'is-danger': isComment })}\n            value={body}\n            onChange={(event) => {\n              handleChange(\n                event.target.value, setBody, setIsComment, isComment,\n              );\n            }}\n          />\n        </div>\n\n        {isComment && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn('button is-link', { 'is-loading': isLoading })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={reset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","/* eslint-disable import/no-duplicates */\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\nimport { CommentData, Comment } from '../types/Comment';\n\nexport const loadUsers = (url = 'users') => {\n  return client.get<User[]>(`/${url}`);\n};\n\nexport const loadPosts = (id: number) => {\n  return client.get<Post[]>(`/posts?userId=${id}`);\n};\n\nexport const loadComments = (id: number) => {\n  return client.get<Comment[]>(`/comments?postId=${id}`);\n};\n\nexport const deleteComments = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n\nexport const addComment = (data: CommentData) => {\n  return client.post<Comment>('/comments', data);\n};\n","import React, { useContext } from 'react';\nimport { Loader } from './Loader';\nimport { Comment } from '../types/Comment';\nimport { deleteComments } from '../api/Api';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Context } from './Context/Context';\n\ntype Props = {\n  comments: Comment[];\n  errorMessage: string;\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  comments,\n  errorMessage,\n  setComments,\n}) => {\n  const {\n    isShownForm,\n    setIsShownForm,\n    postId,\n    posts,\n    isLoading,\n  } = useContext(Context);\n  const post = posts.find(p => p.id === postId);\n\n  const removeComment = (id: number) => {\n    deleteComments(id)\n      .then(() => setComments((current) => current\n        .filter(comment => comment.id !== id)))\n      .catch()\n      .finally();\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      {post && (\n        <div className=\"content\" data-cy=\"PostDetails\">\n          <div className=\"block\">\n            <h2 data-cy=\"PostTitle\">\n              {`#${post?.id}: ${post?.title}`}\n            </h2>\n\n            <p data-cy=\"PostBody\">\n              {post?.body}\n            </p>\n          </div>\n\n          <div className=\"block\">\n            {isLoading ? (\n              <Loader />\n            ) : (\n              <>\n                {errorMessage.includes('No comments yet') && (\n                  <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                    {errorMessage}\n                  </p>\n                )}\n\n                {errorMessage.includes('went wrong') && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"CommentsError\"\n                  >\n                    {errorMessage}\n                  </div>\n                )}\n\n                {comments.length > 0 && (\n                  <>\n                    <p className=\"title is-4\">Comments:</p>\n\n                    {comments.map(comment => {\n                      const {\n                        email, name, body, id,\n                      } = comment;\n\n                      return (\n                        <article\n                          key={id}\n                          className=\"message is-small\"\n                          data-cy=\"Comment\"\n                        >\n                          <div className=\"message-header\">\n                            <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n                              {name}\n                            </a>\n                            <button\n                              data-cy=\"CommentDelete\"\n                              type=\"button\"\n                              className=\"delete is-small\"\n                              aria-label=\"delete\"\n                              onClick={() => removeComment(id)}\n                            >\n                              delete button\n                            </button>\n                          </div>\n\n                          <div className=\"message-body\" data-cy=\"CommentBody\">\n                            {body}\n                          </div>\n                        </article>\n                      );\n                    })}\n                  </>\n                )}\n\n                {isShownForm ? (\n                  <NewCommentForm\n                    setComments={setComments}\n                  />\n                ) : (\n                  <button\n                    data-cy=\"WriteCommentButton\"\n                    type=\"button\"\n                    className=\"button is-link\"\n                    onClick={() => setIsShownForm(true)}\n                  >\n                    Write a comment\n                  </button>\n                )}\n              </>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { User } from '../types/User';\nimport { loadUsers } from '../api/Api';\nimport { Context } from './Context/Context';\n\ntype Props = {\n  isSelectedUser: { current: boolean };\n  getPosts: (id: number) => void;\n  setIsShownSideBar: (value: boolean) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  isSelectedUser,\n  getPosts,\n  setIsShownSideBar,\n}) => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState('');\n  const [isShownUsers, setIsShownUsers] = useState(false);\n\n  useEffect(() => {\n    loadUsers()\n      .then((data) => setUsers(data));\n  }, []);\n\n  const { setPostId } = useContext(Context);\n\n  const handleClick = (id: number, user: User) => {\n    if (selectedUser === user.name) {\n      return;\n    }\n\n    setPostId(id);\n    setSelectedUser(user.name);\n    getPosts(id);\n    setIsShownSideBar(false);\n    // eslint-disable-next-line no-param-reassign\n    isSelectedUser.current = false;\n  };\n\n  return (\n    <div data-cy=\"UserSelector\" className=\"dropdown is-active\">\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsShownUsers(!isShownUsers)}\n          onBlur={() => setTimeout(() => {\n            setIsShownUsers(false);\n          }, 100)}\n        >\n          <span>\n            {!selectedUser ? 'No user selected' : selectedUser}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        {isShownUsers && (\n          <div className=\"dropdown-content\">\n            {users.map((user) => {\n              const { id, name } = user;\n\n              return (\n                <a\n                  href={`#user-${id}`}\n                  key={id}\n                  className={cn('dropdown-item', {\n                    'is-active': name === selectedUser,\n                  })}\n                  onClick={() => handleClick(id, user)}\n                >\n                  {name}\n                </a>\n              );\n            })}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useContext, useRef, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport cn from 'classnames';\nimport { loadComments, loadPosts } from './api/Api';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { Comment } from './types/Comment';\nimport { Context } from './components/Context/Context';\n\nexport const App: React.FC = () => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isShownSideBar, setIsShownSideBar] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const {\n    posts,\n    isLoading,\n    setPosts,\n    setIsLoading,\n  } = useContext(Context);\n\n  const isSelectedUser = useRef(true);\n\n  const getPosts = (id: number) => {\n    setIsLoading(true);\n    setPosts([]);\n    setErrorMessage('');\n    loadPosts(id)\n      .then((data) => {\n        if (data.length === 0) {\n          setErrorMessage('No posts yet');\n        }\n\n        setPosts(data);\n      })\n      .catch((error) => {\n        setErrorMessage('Something went wrong!');\n        throw error;\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  const getComments = (id: number) => {\n    setErrorMessage('');\n    setComments([]);\n    setIsLoading(true);\n    loadComments(id)\n      .then((data) => {\n        if (data.length === 0) {\n          setErrorMessage('No comments yet');\n        } else {\n          setComments(data);\n        }\n      })\n      .catch(() => {\n        setErrorMessage('Something went wrong');\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  isSelectedUser={isSelectedUser}\n                  getPosts={getPosts}\n                  setIsShownSideBar={setIsShownSideBar}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {isSelectedUser.current && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && !posts.length && <Loader />}\n\n                {errorMessage.includes('went wrong') && !posts.length && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {errorMessage}\n                  </div>\n                )}\n\n                {errorMessage.includes('No posts') && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    {errorMessage}\n                  </div>\n                )}\n\n                {posts.length > 0 && (\n                  <PostsList\n                    setIsShownSideBar={setIsShownSideBar}\n                    getComments={getComments}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={cn(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': isShownSideBar },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              <PostDetails\n                comments={comments}\n                errorMessage={errorMessage}\n                setComments={setComments}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\nimport { ContextProvider } from './components/Context/Context';\n\nReactDOM.render(\n  <ContextProvider>\n    <App />\n  </ContextProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}